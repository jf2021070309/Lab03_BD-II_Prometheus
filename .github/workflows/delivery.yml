name: Delivery Workflow

on:
  workflow_dispatch: # Permite activar el workflow manualmente

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Check out the repository
      uses: actions/checkout@v2

    - name: Set up Docker network
      run: |
        # Crear una red Docker para conectar los contenedores
        docker network create my_network

    - name: Pull API image from Docker Hub
      run: |
        # Descargar la imagen de la API desde Docker Hub
        docker pull jf202107309/lab03_bd-ii_prometheus:latest

    - name: Start API container
      run: |
        # Iniciar el contenedor de la API en la red personalizada
        docker run -d --name api_dockerhub_clientes --network my_network -p 5001:8080 \
          -e "ConnectionStrings__ClienteDB=Server=bd_clientes;Database=BD_CLIENTES;User Id=admin_user;Password=UPT.2024;TrustServerCertificate=true" \
          jf202107309/lab03_bd-ii_prometheus:latest

    - name: Start Prometheus container
      run: |
        # Iniciar el contenedor de Prometheus en la red personalizada
        docker run -d --name prometheus_container --network my_network -p 9090:9090 prom/prometheus

    - name: Check if API container is running
      run: |
        echo "Checking if API container is running..."
        docker ps

    - name: Get Prometheus logs
      run: |
        echo "Getting logs from Prometheus container..."
        docker logs prometheus_container || echo "Prometheus container not running"

    - name: Wait briefly for Prometheus to be ready
      run: |
        # Esperar a que Prometheus esté disponible
        echo "Waiting for Prometheus to be available..."
        MAX_ATTEMPTS=5
        ATTEMPT=1

        while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
          if curl --output /dev/null --silent --head --fail http://localhost:9090; then
            echo "Prometheus está activo."
            break
          else
            echo "Prometheus aún no está listo, intento $ATTEMPT. Reintentando en 2 segundos..."
            ATTEMPT=$((ATTEMPT + 1))
            sleep 2
          fi
        done

        if [ $ATTEMPT -gt $MAX_ATTEMPTS ]; then
          echo "Prometheus no se activó a tiempo, pero continuaremos el workflow."
        fi

    - name: Get metrics from Prometheus
      run: |
        # Realizar una petición GET a Prometheus para obtener una métrica específica
        METRIC_NAME="healthcheck_status"
        RESPONSE=$(curl -s "http://localhost:9090/api/v1/query?query=$METRIC_NAME")
        echo "Response from Prometheus:"
        echo $RESPONSE

    - name: Stop Docker containers
      run: |
        # Detener y eliminar los contenedores después de obtener la métrica
        docker stop api_dockerhub_clientes prometheus_container
        docker rm api_dockerhub_clientes prometheus_container

    - name: Clean up Docker network
      run: |
        # Eliminar la red personalizada
        docker network rm my_network
